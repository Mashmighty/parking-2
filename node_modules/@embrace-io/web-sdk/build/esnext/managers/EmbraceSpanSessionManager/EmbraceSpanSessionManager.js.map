{"version":3,"file":"EmbraceSpanSessionManager.js","sources":["../../../../src/managers/EmbraceSpanSessionManager/EmbraceSpanSessionManager.ts"],"sourcesContent":["import { diag, trace } from '@opentelemetry/api';\nimport type { Attributes, DiagLogger, HrTime } from '@opentelemetry/api';\nimport { ATTR_SESSION_ID } from '@opentelemetry/semantic-conventions/incubating';\nimport type {\n  ReasonSessionEnded,\n  PropertyOptions,\n  StartSessionOptions,\n} from '../../api-sessions/index.js';\nimport {\n  EMB_STATES,\n  EMB_TYPES,\n  KEY_EMB_COLD_START,\n  KEY_EMB_SESSION_NUMBER,\n  KEY_EMB_SESSION_REASON_ENDED,\n  KEY_EMB_SESSION_REASON_STARTED,\n  KEY_EMB_STATE,\n  KEY_EMB_TYPE,\n  KEY_PREFIX_EMB_PROPERTIES,\n  KEY_EMB_STARTUP_DURATION,\n} from '../../constants/index.js';\nimport type { PerformanceManager } from '../../utils/index.js';\nimport { generateUUID, OTelPerformanceManager } from '../../utils/index.js';\nimport type {\n  EmbraceSpanSessionManagerArgs,\n  SessionEndedListener,\n  SessionStartedListener,\n  SpanSessionManagerInternal,\n} from './types.js';\nimport type { VisibilityStateDocument } from '../../common/index.js';\nimport type { LimitManagerInternal } from '../EmbraceLimitManager/index.js';\nimport { EmbraceExtendedSpan } from '../index.js';\nimport type { ExtendedSpan } from '../../index.js';\nimport { EMBRACE_SESSION_NUMBER_STORAGE_KEY } from './constants.js';\n\nexport class EmbraceSpanSessionManager implements SpanSessionManagerInternal {\n  private _activeSessionId: string | null = null;\n  private _activeSessionStartTime: HrTime | null = null;\n  private _sessionSpan: ExtendedSpan | null = null;\n  private _activeSessionCounts: Record<string, number> | null = null;\n  private _coldStart: boolean = true; // Whether the session was started from a new page load or not.\n  private _startupDuration: number = 0;\n  private readonly _sessionStartedListeners: Array<SessionStartedListener> = [];\n  private readonly _sessionEndedListeners: Array<SessionEndedListener> = [];\n\n  private readonly _diag: DiagLogger;\n  private readonly _perf: PerformanceManager;\n  private readonly _visibilityDoc: VisibilityStateDocument;\n  private readonly _storage: Storage;\n  private readonly _limitManager: LimitManagerInternal;\n\n  public constructor({\n    diag: diagParam,\n    perf,\n    visibilityDoc = window.document,\n    storage = window.localStorage,\n    limitManager,\n  }: EmbraceSpanSessionManagerArgs) {\n    this._diag =\n      diagParam ??\n      diag.createComponentLogger({\n        namespace: 'EmbraceSpanSessionManager',\n      });\n    this._perf = perf ?? new OTelPerformanceManager();\n    this._visibilityDoc = visibilityDoc;\n    this._storage = storage;\n    this._limitManager = limitManager;\n  }\n\n  // retrieve permanent properties from localStorage\n  private _getPermanentAttributes(): Attributes {\n    const permanentAttributes = new Map();\n    try {\n      for (let i = 0; i < this._storage.length; i++) {\n        const key = this._storage.key(i);\n        if (key?.startsWith(KEY_PREFIX_EMB_PROPERTIES)) {\n          const value = this._storage.getItem(key);\n          if (value) {\n            permanentAttributes.set(key, value);\n          }\n        }\n      }\n    } catch (error) {\n      this._diag.warn('Error loading permanent session properties', error);\n    }\n    return Object.fromEntries(permanentAttributes.entries()) as Attributes;\n  }\n\n  // Increment and return the session number stored in local storage.\n  // This is not perfect in the sense that there may be a race condition between tabs.\n  // Eventually a lock could be implemented, but for now this solution should work fine.\n  public _getSessionNumber(): number {\n    const value = this._storage.getItem(EMBRACE_SESSION_NUMBER_STORAGE_KEY);\n    let number = value ? parseInt(value, 10) : 0;\n    number++;\n    this._storage.setItem(\n      EMBRACE_SESSION_NUMBER_STORAGE_KEY,\n      number.toString()\n    );\n    return number;\n  }\n\n  public addBreadcrumb(name: string) {\n    if (!this._sessionSpan) {\n      this._diag.debug(\n        'trying to add breadcrumb to a session, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    const limitedBreadcrumb = this._limitManager.limitBreadcrumb(name);\n\n    if (limitedBreadcrumb === 'dropped') {\n      return;\n    }\n\n    this._sessionSpan.addEvent(\n      'emb-breadcrumb',\n      {\n        message: limitedBreadcrumb.name,\n      },\n      this._perf.getNowMillis()\n    );\n  }\n\n  public addProperty(\n    propertyKey: string,\n    value: string,\n    options?: PropertyOptions\n  ) {\n    if (!this._sessionSpan) {\n      this._diag.debug(\n        'trying to add properties to a session, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    const limitedSessionProperty = this._limitManager.limitSessionProperty(\n      propertyKey,\n      value\n    );\n\n    if (limitedSessionProperty === 'dropped') {\n      return;\n    }\n\n    const attributeKey = KEY_PREFIX_EMB_PROPERTIES + limitedSessionProperty.key;\n    this._sessionSpan.setAttribute(attributeKey, limitedSessionProperty.value);\n\n    if (options?.lifespan === 'permanent') {\n      try {\n        this._storage.setItem(attributeKey, value);\n      } catch (error) {\n        this._diag.warn('Failed to set permanent session property', error);\n      }\n    }\n  }\n\n  public removeProperty(propertyKey: string) {\n    if (!this._sessionSpan) {\n      this._diag.debug(\n        'trying to remove a session property, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    // We truncate long session property keys on addProperty so need to apply the same logic here\n    const attributeKey =\n      KEY_PREFIX_EMB_PROPERTIES +\n      this._limitManager.truncateString('session_property_key', propertyKey);\n    this._sessionSpan.removeAttribute(attributeKey);\n\n    try {\n      if (this._storage.getItem(attributeKey)) {\n        this._storage.removeItem(attributeKey);\n      }\n    } catch (error) {\n      this._diag.warn('Error removing permanent session property', error);\n    }\n  }\n\n  // the external api doesn't include a reason, and if a users uses it to end a session, the reason will be 'manual'\n  // note: don't use this internally, this is just for user facing APIs. Use this.endSessionSpanInternal instead.\n  public endSessionSpan() {\n    this.endSessionSpanInternal('manual');\n  }\n\n  // endSessionSpanInternal is not part of the public API, but is used internally to end a session span adding a specific reason\n  public endSessionSpanInternal(reason: ReasonSessionEnded) {\n    if (!this._sessionSpan) {\n      this._diag.debug(\n        'trying to end a session, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    this._sessionSpan.setAttributes({\n      ...this._getPermanentAttributes(),\n      [KEY_EMB_SESSION_REASON_ENDED]: reason,\n      ...this._activeSessionCounts,\n      ...this._limitManager.getDiagnosticCounts(),\n      [KEY_EMB_STARTUP_DURATION]: this._startupDuration,\n    });\n\n    this._sessionSpan.end();\n    this._sessionSpan = null;\n    this._activeSessionStartTime = null;\n    this._activeSessionId = null;\n    this._activeSessionCounts = null;\n\n    for (const listener of this._sessionEndedListeners) {\n      try {\n        listener();\n      } catch (error) {\n        this._diag.warn('Error while executing session ended listener', error);\n      }\n    }\n\n    // For the limit manager to add a session ended listener it would need a reference to this\n    // session manager which would create a circular dependency\n    this._limitManager.reset();\n  }\n\n  public getSessionId(): string | null {\n    return this._activeSessionId;\n  }\n\n  public getSessionSpan(): ExtendedSpan | null {\n    return this._sessionSpan;\n  }\n\n  public getSessionStartTime(): HrTime | null {\n    return this._activeSessionStartTime;\n  }\n\n  public startSessionSpan(options?: StartSessionOptions) {\n    // if there is a session already in progress, end it first\n    if (this._sessionSpan) {\n      this.endSessionSpanInternal('manual');\n    }\n\n    const tracer = trace.getTracer('embrace-web-sdk-sessions');\n    this._activeSessionId = generateUUID();\n    this._activeSessionStartTime = this._perf.getNowHRTime();\n    this._activeSessionCounts = {};\n\n    const attributes: Attributes = {\n      ...this._getPermanentAttributes(),\n      [KEY_EMB_TYPE]: EMB_TYPES.Session,\n      [KEY_EMB_STATE]:\n        this._visibilityDoc.visibilityState === 'hidden'\n          ? EMB_STATES.Background\n          : EMB_STATES.Foreground,\n      [ATTR_SESSION_ID]: this._activeSessionId,\n      [KEY_EMB_COLD_START]: this._coldStart,\n      [KEY_EMB_SESSION_NUMBER]: this._getSessionNumber(),\n    };\n\n    if (options?.reason) {\n      attributes[KEY_EMB_SESSION_REASON_STARTED] = options.reason;\n    }\n\n    this._sessionSpan = new EmbraceExtendedSpan(\n      tracer.startSpan('emb-session', {\n        attributes,\n      })\n    );\n\n    this._coldStart = false;\n\n    for (const listener of this._sessionStartedListeners) {\n      try {\n        listener();\n      } catch (error) {\n        this._diag.warn(\n          'Error while executing session started listener',\n          error\n        );\n      }\n    }\n  }\n\n  public incrSessionCountForKey(key: string) {\n    if (!this._sessionSpan || !this._activeSessionCounts) {\n      this._diag.debug(\n        'trying to increment a count for the active session, but there is no session in progress. This is a no-op.'\n      );\n      return;\n    }\n\n    this._activeSessionCounts[key] = (this._activeSessionCounts[key] || 0) + 1;\n  }\n\n  public addSessionStartedListener(listener: SessionStartedListener) {\n    const listenerIndex = this._sessionStartedListeners.push(listener);\n\n    return () => {\n      this._sessionStartedListeners.splice(listenerIndex - 1, 1);\n    };\n  }\n\n  public addSessionEndedListener(listener: SessionEndedListener) {\n    const listenerIndex = this._sessionEndedListeners.push(listener);\n\n    return () => {\n      this._sessionEndedListeners.splice(listenerIndex - 1, 1);\n    };\n  }\n\n  public recordStartupDuration(duration: number) {\n    this._startupDuration = duration;\n  }\n}\n"],"names":["EmbraceSpanSessionManager","diag","diagParam","perf","visibilityDoc","window","document","storage","localStorage","limitManager","_activeSessionId","_activeSessionStartTime","_sessionSpan","_activeSessionCounts","_coldStart","_startupDuration","_sessionStartedListeners","_sessionEndedListeners","_diag","createComponentLogger","namespace","_perf","OTelPerformanceManager","_visibilityDoc","_storage","_limitManager","_getPermanentAttributes","permanentAttributes","Map","i","length","key","startsWith","KEY_PREFIX_EMB_PROPERTIES","value","getItem","set","error","warn","Object","fromEntries","entries","_getSessionNumber","EMBRACE_SESSION_NUMBER_STORAGE_KEY","number","parseInt","setItem","toString","addBreadcrumb","name","debug","limitedBreadcrumb","limitBreadcrumb","addEvent","message","getNowMillis","addProperty","propertyKey","options","limitedSessionProperty","limitSessionProperty","attributeKey","setAttribute","lifespan","removeProperty","truncateString","removeAttribute","removeItem","endSessionSpan","endSessionSpanInternal","reason","setAttributes","KEY_EMB_SESSION_REASON_ENDED","getDiagnosticCounts","KEY_EMB_STARTUP_DURATION","end","listener","reset","getSessionId","getSessionSpan","getSessionStartTime","startSessionSpan","tracer","trace","getTracer","generateUUID","getNowHRTime","attributes","KEY_EMB_TYPE","EMB_TYPES","Session","KEY_EMB_STATE","visibilityState","EMB_STATES","Background","Foreground","ATTR_SESSION_ID","KEY_EMB_COLD_START","KEY_EMB_SESSION_NUMBER","KEY_EMB_SESSION_REASON_STARTED","EmbraceExtendedSpan","startSpan","incrSessionCountForKey","addSessionStartedListener","listenerIndex","push","splice","addSessionEndedListener","recordStartupDuration","duration"],"mappings":"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"}