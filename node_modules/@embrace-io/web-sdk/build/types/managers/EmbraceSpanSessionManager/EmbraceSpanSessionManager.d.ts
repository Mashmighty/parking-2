import type { HrTime } from '@opentelemetry/api';
import type { ReasonSessionEnded, PropertyOptions, StartSessionOptions } from '../../api-sessions/index.js';
import type { EmbraceSpanSessionManagerArgs, SessionEndedListener, SessionStartedListener, SpanSessionManagerInternal } from './types.js';
import type { ExtendedSpan } from '../../index.js';
export declare class EmbraceSpanSessionManager implements SpanSessionManagerInternal {
    private _activeSessionId;
    private _activeSessionStartTime;
    private _sessionSpan;
    private _activeSessionCounts;
    private _coldStart;
    private _startupDuration;
    private readonly _sessionStartedListeners;
    private readonly _sessionEndedListeners;
    private readonly _diag;
    private readonly _perf;
    private readonly _visibilityDoc;
    private readonly _storage;
    private readonly _limitManager;
    constructor({ diag: diagParam, perf, visibilityDoc, storage, limitManager, }: EmbraceSpanSessionManagerArgs);
    private _getPermanentAttributes;
    _getSessionNumber(): number;
    addBreadcrumb(name: string): void;
    addProperty(propertyKey: string, value: string, options?: PropertyOptions): void;
    removeProperty(propertyKey: string): void;
    endSessionSpan(): void;
    endSessionSpanInternal(reason: ReasonSessionEnded): void;
    getSessionId(): string | null;
    getSessionSpan(): ExtendedSpan | null;
    getSessionStartTime(): HrTime | null;
    startSessionSpan(options?: StartSessionOptions): void;
    incrSessionCountForKey(key: string): void;
    addSessionStartedListener(listener: SessionStartedListener): () => void;
    addSessionEndedListener(listener: SessionEndedListener): () => void;
    recordStartupDuration(duration: number): void;
}
//# sourceMappingURL=EmbraceSpanSessionManager.d.ts.map