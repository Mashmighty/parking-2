'use strict';

var instrumentationDocumentLoad = require('@opentelemetry/instrumentation-document-load');
var instrumentationFetch = require('@opentelemetry/instrumentation-fetch');
var instrumentationXmlHttpRequest = require('@opentelemetry/instrumentation-xml-http-request');
var SpanSessionOnLoadInstrumentation = require('../instrumentations/session/SpanSessionOnLoadInstrumentation/SpanSessionOnLoadInstrumentation.js');
var SpanSessionVisibilityInstrumentation = require('../instrumentations/session/SpanSessionVisibilityInstrumentation/SpanSessionVisibilityInstrumentation.js');
var SpanSessionBrowserActivityInstrumentation = require('../instrumentations/session/SpanSessionBrowserActivityInstrumentation/SpanSessionBrowserActivityInstrumentation.js');
var SpanSessionTimeoutInstrumentation = require('../instrumentations/session/SpanSessionTimeoutInstrumentation/SpanSessionTimeoutInstrumentation.js');
var GlobalExceptionInstrumentation = require('../instrumentations/exceptions/GlobalExceptionInstrumentation/GlobalExceptionInstrumentation.js');
var ClicksInstrumentation = require('../instrumentations/clicks/ClicksInstrumentation/ClicksInstrumentation.js');
var WebVitalsInstrumentation = require('../instrumentations/web-vitals/WebVitalsInstrumentation/WebVitalsInstrumentation.js');

const setupDefaultInstrumentations = (config = {})=>{
    /*
    These instrumentations are core to managing the session lifecycle and so are not optional
   */ const instrumentations = [
        new SpanSessionOnLoadInstrumentation.SpanSessionOnLoadInstrumentation(config['session-on-load']),
        new SpanSessionVisibilityInstrumentation.SpanSessionVisibilityInstrumentation(config['session-visibility']),
        new SpanSessionBrowserActivityInstrumentation.SpanSessionBrowserActivityInstrumentation(config['session-activity']),
        new SpanSessionTimeoutInstrumentation.SpanSessionTimeoutInstrumentation(config['session-timeout'])
    ];
    if (!config.omit?.has('exception')) {
        instrumentations.push(new GlobalExceptionInstrumentation.GlobalExceptionInstrumentation(config['exception']));
    }
    if (!config.omit?.has('click')) {
        instrumentations.push(new ClicksInstrumentation.ClicksInstrumentation(config['click']));
    }
    if (!config.omit?.has('web-vital')) {
        instrumentations.push(new WebVitalsInstrumentation.WebVitalsInstrumentation(config['web-vital']));
    }
    if (!config.omit?.has('@opentelemetry/instrumentation-document-load')) {
        instrumentations.push(new instrumentationDocumentLoad.DocumentLoadInstrumentation(config['@opentelemetry/instrumentation-document-load']));
    }
    if (!config.omit?.has('@opentelemetry/instrumentation-fetch')) {
        instrumentations.push(new instrumentationFetch.FetchInstrumentation({
            ...config['network'],
            ...config['@opentelemetry/instrumentation-fetch']
        }));
    }
    if (!config.omit?.has('@opentelemetry/instrumentation-xml-http-request')) {
        instrumentations.push(new instrumentationXmlHttpRequest.XMLHttpRequestInstrumentation({
            ...config['network'],
            ...config['@opentelemetry/instrumentation-xml-http-request']
        }));
    }
    return instrumentations;
};

exports.setupDefaultInstrumentations = setupDefaultInstrumentations;
//# sourceMappingURL=setupDefaultInstrumentations.js.map
