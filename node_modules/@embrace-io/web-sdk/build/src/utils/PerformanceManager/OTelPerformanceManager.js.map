{"version":3,"file":"OTelPerformanceManager.js","sources":["../../../../src/utils/PerformanceManager/OTelPerformanceManager.ts"],"sourcesContent":["import {\n  hrTimeToMilliseconds,\n  millisToHrTime,\n  otperformance,\n} from '@opentelemetry/core';\nimport type { PerformanceClock, PerformanceManager } from './types.js';\nimport type { HrTime } from '@opentelemetry/api';\n\nexport class OTelPerformanceManager implements PerformanceManager {\n  private readonly _clock: PerformanceClock;\n\n  public constructor(clock: PerformanceClock = otperformance) {\n    this._clock = clock;\n  }\n\n  public epochMillisFromOriginOffset = (originOffset: number) =>\n    this._clock.timeOrigin + originOffset;\n\n  public getNowHRTime = () => millisToHrTime(this.getNowMillis());\n\n  public getNowMillis = () =>\n    this.epochMillisFromOriginOffset(this._clock.now()); // otperformance.now() returns milliseconds since timeOrigin, timeOrigin is the time from epoch to the start of the page load\n\n  public millisSinceHRTime = (time: HrTime) =>\n    this.getNowMillis() - hrTimeToMilliseconds(time);\n}\n"],"names":["OTelPerformanceManager","clock","otperformance","epochMillisFromOriginOffset","originOffset","_clock","timeOrigin","getNowHRTime","millisToHrTime","getNowMillis","now","millisSinceHRTime","time","hrTimeToMilliseconds"],"mappings":";;;;AAQO,MAAMA,sBAAAA,CAAAA;IAGX,WAAA,CAAmBC,KAAAA,GAA0BC,kBAAa,CAAE;AAIrDC,QAAAA,IAAAA,CAAAA,2BAAAA,GAA8B,CAACC,YAAAA,GACpC,IAAI,CAACC,MAAM,CAACC,UAAU,GAAGF,YAAAA;AAEpBG,QAAAA,IAAAA,CAAAA,YAAAA,GAAe,IAAMC,mBAAAA,CAAe,IAAI,CAACC,YAAY,EAAA,CAAA;aAErDA,YAAAA,GAAe,IACpB,IAAI,CAACN,2BAA2B,CAAC,IAAI,CAACE,MAAM,CAACK,GAAG,EAAA,CAAA,CAAA;AAE3CC,QAAAA,IAAAA,CAAAA,iBAAAA,GAAoB,CAACC,IAAAA,GAC1B,IAAI,CAACH,YAAY,KAAKI,yBAAAA,CAAqBD,IAAAA,CAAAA;QAZ3C,IAAI,CAACP,MAAM,GAAGJ,KAAAA;AAChB,IAAA;AAYF;;;;"}