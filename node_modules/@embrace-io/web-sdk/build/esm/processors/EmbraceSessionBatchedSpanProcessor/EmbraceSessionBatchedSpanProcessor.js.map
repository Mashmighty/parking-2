{"version":3,"file":"EmbraceSessionBatchedSpanProcessor.js","sources":["../../../../src/processors/EmbraceSessionBatchedSpanProcessor/EmbraceSessionBatchedSpanProcessor.ts"],"sourcesContent":["import type { ExportResult } from '@opentelemetry/core';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  internal,\n} from '@opentelemetry/core';\nimport type { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-web'; // TODO: don't rely on internal API\nimport { EMB_TYPES, KEY_EMB_TYPE } from '../../constants/index.js';\nimport type { SessionSpan } from '../../instrumentations/index.js';\nimport { EmbraceProcessor } from '../EmbraceProcessor/index.js';\nimport type { EmbraceSessionBatchedSpanProcessorArgs } from './types.js';\nimport type { LimitManagerInternal } from '../../managers/index.js';\n\nconst isSessionSpan = (span: ReadableSpan | SessionSpan): span is SessionSpan =>\n  span.attributes[KEY_EMB_TYPE] === EMB_TYPES.Session;\n\nexport class EmbraceSessionBatchedSpanProcessor extends EmbraceProcessor {\n  private readonly _shutdownOnce: BindOnceFuture<void>;\n  private _pendingSpans: ReadableSpan[] = [];\n  private readonly _exporter: SpanExporter;\n  private readonly _limitManager: LimitManagerInternal;\n\n  public constructor({\n    exporter,\n    limitManager,\n    ...parentArgs\n  }: EmbraceSessionBatchedSpanProcessorArgs) {\n    super({\n      ...parentArgs,\n      processorName: 'EmbraceSessionBatchedSpanProcessor',\n    });\n    this._exporter = exporter;\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._limitManager = limitManager;\n  }\n\n  public override forceFlush(): Promise<void> {\n    this.diag.debug(\n      'forceFlush called for EmbraceSessionBatchedSpanProcessor. This is a no op'\n    );\n    return Promise.resolve(undefined);\n  }\n\n  public onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      this.diag.debug('span ended after processor shutdown. Ignoring span.');\n      return;\n    }\n\n    if (!isSessionSpan(span)) {\n      this.diag.debug('non-session span ended. Adding to pending spans queue.');\n      if (this._limitManager.dropReadableSpan(span)) {\n        return;\n      }\n      this._pendingSpans.push(span);\n    } else {\n      this.diag.debug('session span ended. Exporting all pending spans.');\n      internal\n        ._export(this._exporter, [span, ...this._pendingSpans])\n        .then((result: ExportResult) => {\n          if (result.code === ExportResultCode.FAILED) {\n            this.diag.error(\n              `spans failed to export: ${result.error?.message || 'unknown error'}`\n            );\n          }\n        })\n        // Seems like everything related to the export logic does a good job of catching and only ever resolving with\n        // an ExportResult even on failure: https://github.com/open-telemetry/opentelemetry-js/blob/cf6dffeebcf72c42b2cb4d2bf2db720369b53081/packages/opentelemetry-core/src/internal/exporter.ts#L37\n        // Keep this block just in case that assumption changes in a future version\n        .catch((reason: unknown) => {\n          let msg = 'unknown error';\n          if (reason && reason instanceof Error) {\n            msg = reason.message;\n          } else if (typeof reason === 'string') {\n            msg = reason;\n          }\n\n          this.diag.error(`spans failed to export: ${msg}`);\n        });\n      this._pendingSpans = [];\n    }\n  }\n\n  public override onStart(): void {\n    // do nothing.\n  }\n\n  public shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private readonly _shutdown = () => {\n    return this._exporter.shutdown();\n  };\n}\n"],"names":["isSessionSpan","span","attributes","KEY_EMB_TYPE","EMB_TYPES","Session","EmbraceSessionBatchedSpanProcessor","EmbraceProcessor","exporter","limitManager","parentArgs","processorName","_pendingSpans","_shutdown","_exporter","shutdown","_shutdownOnce","BindOnceFuture","_limitManager","forceFlush","diag","debug","Promise","resolve","undefined","onEnd","isCalled","dropReadableSpan","push","internal","_export","then","result","code","ExportResultCode","FAILED","error","message","catch","reason","msg","Error","onStart","call"],"mappings":"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"}