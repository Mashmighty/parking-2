{"version":3,"file":"SpanSessionVisibilityInstrumentation.js","sources":["../../../../../src/instrumentations/session/SpanSessionVisibilityInstrumentation/SpanSessionVisibilityInstrumentation.ts"],"sourcesContent":["import { EmbraceInstrumentationBase } from '../../EmbraceInstrumentationBase/index.js';\nimport type { SpanSessionVisibilityInstrumentationArgs } from './types.js';\nimport {\n  bulkAddEventListener,\n  bulkRemoveEventListener,\n  throttle,\n} from '../../../utils/index.js';\nimport type { TimeoutRef } from '../../../utils/index.js';\n\nconst SESSION_INTERACTION_EVENTS = ['mousedown'];\n\nexport class SpanSessionVisibilityInstrumentation extends EmbraceInstrumentationBase {\n  private _currentVisibilityState: DocumentVisibilityState;\n  private _checkVisibilityTimeout: TimeoutRef | null;\n  private _interactionSinceLastVisibilityChange: boolean;\n  private readonly _avoidEndingLimitedSessions: boolean;\n  private readonly _checkVisibilityChange: () => void;\n  private readonly _onVisibilityChange: () => void;\n  private readonly _onInteractionThrottled: () => void;\n\n  public constructor({\n    diag,\n    perf,\n    visibilityWaitTimeMs = 0,\n    limitedSessionMaxDurationMs = 0,\n    backgroundSessions = false,\n    visibilityDoc = window.document,\n  }: SpanSessionVisibilityInstrumentationArgs = {}) {\n    super({\n      instrumentationName: 'SpanSessionVisibilityInstrumentation',\n      instrumentationVersion: '1.0.0',\n      diag,\n      perf,\n      config: {},\n    });\n\n    this._currentVisibilityState = visibilityDoc.visibilityState;\n    this._checkVisibilityTimeout = null;\n    this._interactionSinceLastVisibilityChange = false;\n    this._avoidEndingLimitedSessions = limitedSessionMaxDurationMs > 0;\n\n    this._checkVisibilityChange = () => {\n      if (visibilityWaitTimeMs <= 0) {\n        // If no timeout configured, events are forwarded directly.\n        this._currentVisibilityState = visibilityDoc.visibilityState;\n        this._onVisibilityChange();\n        return;\n      }\n      if (this._checkVisibilityTimeout) {\n        clearTimeout(this._checkVisibilityTimeout);\n      }\n\n      // When switching to visible, we want to trigger the event immediately\n      if (\n        visibilityDoc.visibilityState === 'visible' &&\n        this._currentVisibilityState != visibilityDoc.visibilityState\n      ) {\n        this._currentVisibilityState = visibilityDoc.visibilityState;\n        this._onVisibilityChange();\n        return;\n      }\n\n      this._diag.debug(\n        `Visibility changed to ${visibilityDoc.visibilityState}. Will wait ${(visibilityWaitTimeMs / 1000).toString()}s, and check if visibility changed`\n      );\n      this._checkVisibilityTimeout = setTimeout(() => {\n        if (this._currentVisibilityState != visibilityDoc.visibilityState) {\n          this._currentVisibilityState = visibilityDoc.visibilityState;\n          this._onVisibilityChange();\n        } else {\n          this._diag.debug(\n            `Visibility was not changed after timeout happened: ${visibilityDoc.visibilityState}`\n          );\n        }\n      }, visibilityWaitTimeMs);\n    };\n\n    this._onVisibilityChange = () => {\n      this._diag.debug(\n        `Visibility change detected: ${visibilityDoc.visibilityState}`\n      );\n\n      const currentSessionStartTime = this.sessionManager.getSessionStartTime();\n\n      // A limited session is one that is shorter than a specified duration threshold and contains no user interactions\n      const isLimitedSession =\n        this._avoidEndingLimitedSessions &&\n        currentSessionStartTime !== null &&\n        this.perf.millisSinceHRTime(currentSessionStartTime) <\n          limitedSessionMaxDurationMs &&\n        !this._interactionSinceLastVisibilityChange;\n\n      if (isLimitedSession) {\n        this._diag.debug(\n          'Not ending the session since it is considered limited'\n        );\n        // If this session still meets the definition of a limited session don't yet end it but instead just record\n        // the visibility change as a breadcrumb\n        this.sessionManager.addBreadcrumb(\n          `Tab visibility changed to ${visibilityDoc.visibilityState}`\n        );\n      } else {\n        this.sessionManager.endSessionSpanInternal('state_changed');\n\n        if (visibilityDoc.visibilityState === 'hidden' && backgroundSessions) {\n          this._diag.debug(\n            'Starting a session since document visibility switched to hidden and `backgroundSessions` is enabled'\n          );\n          this.sessionManager.startSessionSpan({ reason: 'hidden' });\n        } else if (visibilityDoc.visibilityState === 'visible') {\n          this._diag.debug(\n            'Starting a session since document visibility switched to visible'\n          );\n          this.sessionManager.startSessionSpan({ reason: 'visible' });\n        }\n      }\n\n      this._interactionSinceLastVisibilityChange = false;\n    };\n\n    this._onInteractionThrottled = throttle(() => {\n      this._interactionSinceLastVisibilityChange = true;\n    }, 1000);\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n\n  public disable(): void {\n    window.removeEventListener('visibilitychange', this._checkVisibilityChange);\n\n    if (this._avoidEndingLimitedSessions) {\n      bulkRemoveEventListener({\n        target: window,\n        events: SESSION_INTERACTION_EVENTS,\n        callback: this._onInteractionThrottled,\n      });\n    }\n  }\n\n  public enable(): void {\n    window.addEventListener('visibilitychange', this._checkVisibilityChange);\n\n    if (this._avoidEndingLimitedSessions) {\n      bulkAddEventListener({\n        target: window,\n        events: SESSION_INTERACTION_EVENTS,\n        callback: this._onInteractionThrottled,\n      });\n    }\n  }\n}\n"],"names":["SESSION_INTERACTION_EVENTS","SpanSessionVisibilityInstrumentation","EmbraceInstrumentationBase","diag","perf","visibilityWaitTimeMs","limitedSessionMaxDurationMs","backgroundSessions","visibilityDoc","window","document","instrumentationName","instrumentationVersion","config","_currentVisibilityState","visibilityState","_checkVisibilityTimeout","_interactionSinceLastVisibilityChange","_avoidEndingLimitedSessions","_checkVisibilityChange","_onVisibilityChange","clearTimeout","_diag","debug","toString","setTimeout","currentSessionStartTime","sessionManager","getSessionStartTime","isLimitedSession","millisSinceHRTime","addBreadcrumb","endSessionSpanInternal","startSessionSpan","reason","_onInteractionThrottled","throttle","_config","enabled","enable","disable","removeEventListener","bulkRemoveEventListener","target","events","callback","addEventListener","bulkAddEventListener"],"mappings":"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"}