{"version":3,"file":"initSDK.js","sources":["../../../src/sdk/initSDK.ts"],"sourcesContent":["import { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { Resource } from '@opentelemetry/resources';\nimport type { LogRecordProcessor } from '@opentelemetry/sdk-logs';\nimport {\n  BatchLogRecordProcessor,\n  LoggerProvider,\n} from '@opentelemetry/sdk-logs';\nimport {\n  BatchSpanProcessor,\n  WebTracerProvider,\n} from '@opentelemetry/sdk-trace-web';\nimport type { SpanProcessor } from '@opentelemetry/sdk-trace-web';\nimport { session } from '../api-sessions/index.js';\nimport { user } from '../api-users/index.js';\nimport {\n  EmbraceLogExporter,\n  EmbraceTraceExporter,\n} from '../exporters/index.js';\nimport {\n  EmbraceLimitManager,\n  EmbraceLogManager,\n  EmbraceSpanSessionManager,\n  EmbraceTraceManager,\n  EmbraceUserManager,\n  EmbraceDynamicConfigManager,\n  DEFAULT_LIMITS,\n  EmbraceSDKFeaturesManager,\n} from '../managers/index.js';\nimport {\n  EmbraceNetworkSpanProcessor,\n  EmbraceSessionBatchedSpanProcessor,\n  EmbraceLogRecordProcessor,\n  IdentifiableSessionLogRecordProcessor,\n  UserSpanProcessor,\n  UserLogRecordProcessor,\n  LogRecordScrubProcessor,\n  SpanScrubProcessor,\n} from '../processors/index.js';\nimport { getWebSDKResource } from '../resources/index.js';\nimport { isValidAppID } from './utils.js';\nimport { setupDefaultInstrumentations } from './setupDefaultInstrumentations.js';\nimport { createSessionSpanProcessor } from '@opentelemetry/web-common';\nimport { log } from '../api-logs/index.js';\nimport { trace } from '../api-traces/index.js';\nimport type {\n  DynamicSDKConfig,\n  SDKControl,\n  SDKInitConfig,\n  SetupLogsArgs,\n  SetupSessionArgs,\n  SetupTracesArgs,\n} from './types.js';\nimport { registry } from './registry.js';\nimport { getDefaultAttributeScrubbers } from './defaultAttributeScrubbers.js';\nimport type { AttributeScrubber } from '../common/index.js';\nimport { OTelPerformanceManager } from '../utils/index.js';\n\nexport const initSDK = (\n  {\n    appID,\n    appVersion,\n    templateBundleID,\n    resource = Resource.empty(),\n    spanExporters = [],\n    logExporters = [],\n    spanProcessors = [],\n    propagator = null,\n    defaultInstrumentationConfig,\n    instrumentations = [],\n    contextManager = null,\n    logProcessors = [],\n    attributeScrubbers = [],\n    enableDefaultAttributeScrubbing = true,\n    additionalQueryParamsToScrub = [],\n    logLevel = DiagLogLevel.ERROR,\n    embraceDataURL,\n    embraceConfigURL,\n    diagLogger = diag.createComponentLogger({\n      namespace: 'embrace-sdk',\n    }),\n    dynamicSDKConfigManager: providedDynamicSDKConfigManager,\n    dynamicSDKConfig,\n  }: SDKInitConfig = { appID: '' }\n): SDKControl | false => {\n  try {\n    const perf = new OTelPerformanceManager();\n    const initSDKStart = perf.getNowMillis();\n\n    const existingSDK = registry.registered();\n    if (existingSDK !== null) {\n      diagLogger.warn(\n        'SDK has already been successfully initialized, skipping this invocation of initSDK'\n      );\n      return existingSDK;\n    }\n\n    diag.setLogger(new DiagConsoleLogger(), {\n      logLevel,\n    });\n\n    if (templateBundleID && templateBundleID.length !== 32) {\n      throw new Error('templateBundleID should be 32 characters long');\n    }\n\n    const resourceWithWebSDKAttributes = resource.merge(\n      getWebSDKResource({\n        diagLogger,\n        appVersion,\n        templateBundleID,\n        pageSessionStorage: window.sessionStorage,\n      })\n    );\n\n    const sendingToEmbrace = !!appID && isValidAppID(appID);\n\n    if (!sendingToEmbrace && !logExporters.length && !spanExporters.length) {\n      throw new Error(\n        'when the embrace appID is omitted then at least one logExporter or spanExporter must be set'\n      );\n    }\n\n    const userManager = setupUser();\n    const enduserPseudoID = userManager.getEmbraceUserId();\n    if (sendingToEmbrace && !enduserPseudoID) {\n      throw new Error('userID is required when using Embrace exporter');\n    }\n\n    const dynamicConfigManager =\n      providedDynamicSDKConfigManager ??\n      new EmbraceDynamicConfigManager({\n        appID,\n        appVersion,\n        embraceConfigURL,\n        defaultConfig: dynamicSDKConfig,\n        deviceId: enduserPseudoID,\n      });\n    void dynamicConfigManager.refreshRemoteConfig();\n\n    const sdkFeaturesManager = new EmbraceSDKFeaturesManager({\n      dynamicConfigManager,\n      deviceId: enduserPseudoID,\n    });\n\n    if (!sdkFeaturesManager.isSDKEnabled()) {\n      diagLogger.debug('SDK is disabled, skipping initialization.');\n\n      return false;\n    }\n\n    const limitManager = new EmbraceLimitManager(DEFAULT_LIMITS);\n    const spanSessionManager = setupSession({\n      limitManager,\n    });\n\n    const finalAttributeScrubbers: AttributeScrubber[] = [\n      ...(enableDefaultAttributeScrubbing\n        ? getDefaultAttributeScrubbers(additionalQueryParamsToScrub)\n        : []),\n      ...attributeScrubbers,\n    ];\n\n    const tracerProvider = setupTraces({\n      sendingToEmbrace,\n      appID,\n      enduserPseudoID,\n      resource: resourceWithWebSDKAttributes,\n      spanSessionManager,\n      userManager,\n      spanExporters,\n      spanProcessors,\n      propagator,\n      contextManager,\n      limitManager,\n      attributeScrubbers: finalAttributeScrubbers,\n      embraceDataURL,\n    });\n\n    const loggerProvider = setupLogs({\n      sendingToEmbrace,\n      appID,\n      enduserPseudoID,\n      resource: resourceWithWebSDKAttributes,\n      userManager,\n      logExporters,\n      logProcessors,\n      spanSessionManager,\n      limitManager,\n      attributeScrubbers: finalAttributeScrubbers,\n      embraceDataURL,\n    });\n\n    // NOTE: we require setupInstrumentation to run the last, after setupLogs and setupTraces. This is how OTel works wrt\n    // the dependencies between instrumentations and global providers. We need the providers for tracers, and logs to be\n    // setup before we enable instrumentations.\n    registerInstrumentations({\n      instrumentations: [\n        ...instrumentations,\n        setupDefaultInstrumentations(defaultInstrumentationConfig),\n      ],\n    });\n\n    diagLogger.info('successfully initialized the SDK');\n\n    const sdkControl: SDKControl = {\n      setDynamicConfig: (config: Partial<DynamicSDKConfig>) => {\n        dynamicConfigManager.setConfig(config);\n      },\n      flush: async () => {\n        await tracerProvider.forceFlush();\n        await loggerProvider.forceFlush();\n      },\n    };\n\n    registry.register(sdkControl);\n\n    spanSessionManager.recordStartupDuration(\n      perf.getNowMillis() - initSDKStart\n    );\n\n    return sdkControl;\n  } catch (e) {\n    const message = e instanceof Error ? e.message : 'Unknown error.';\n    diagLogger.error(`failed to initialize the SDK: ${message}`);\n    return false;\n  }\n};\n\nconst setupUser = () => {\n  const embraceUserManager = new EmbraceUserManager();\n  user.setGlobalUserManager(embraceUserManager);\n  return embraceUserManager;\n};\n\nconst setupSession = ({ limitManager }: SetupSessionArgs) => {\n  const embraceSpanSessionManager = new EmbraceSpanSessionManager({\n    limitManager,\n  });\n  session.setGlobalSessionManager(embraceSpanSessionManager);\n  return embraceSpanSessionManager;\n};\n\nconst setupTraces = ({\n  sendingToEmbrace,\n  appID,\n  enduserPseudoID,\n  resource,\n  spanSessionManager,\n  userManager,\n  spanExporters,\n  spanProcessors = [],\n  propagator = null,\n  contextManager = null,\n  limitManager,\n  attributeScrubbers,\n  embraceDataURL,\n}: SetupTracesArgs) => {\n  const embraceTraceManager = new EmbraceTraceManager();\n  trace.setGlobalTraceManager(embraceTraceManager);\n\n  const finalSpanProcessors: SpanProcessor[] = [\n    ...spanProcessors,\n    createSessionSpanProcessor(spanSessionManager),\n    new EmbraceNetworkSpanProcessor(),\n    new UserSpanProcessor({ userManager }),\n    new SpanScrubProcessor({ attributeScrubbers }),\n  ];\n\n  spanExporters?.forEach(exporter => {\n    finalSpanProcessors.push(new BatchSpanProcessor(exporter));\n  });\n\n  if (sendingToEmbrace && appID && enduserPseudoID) {\n    finalSpanProcessors.push(\n      new EmbraceSessionBatchedSpanProcessor({\n        exporter: new EmbraceTraceExporter({\n          appID,\n          embraceDataURL,\n          userID: enduserPseudoID,\n        }),\n        limitManager,\n      })\n    );\n  }\n\n  const tracerProvider = new WebTracerProvider({\n    resource,\n    spanProcessors: finalSpanProcessors,\n    spanLimits: {\n      // Session properties are stored as attributes on the session span, add a\n      // buffer here so that there is room for our internal attributes\n      attributeCountLimit: DEFAULT_LIMITS.maxAllowed.session_property * 2,\n      attributePerEventCountLimit: 20,\n      // Breadcrumbs are stored as events on the session span, add a\n      // buffer here so that there is room for our internal events\n      eventCountLimit: DEFAULT_LIMITS.maxAllowed.breadcrumb * 2,\n      attributeValueLengthLimit: 1024,\n    },\n  });\n\n  tracerProvider.register({\n    contextManager,\n    propagator,\n  });\n\n  return tracerProvider;\n};\n\nconst setupLogs = ({\n  sendingToEmbrace,\n  appID,\n  enduserPseudoID,\n  resource,\n  userManager,\n  logExporters,\n  logProcessors,\n  spanSessionManager,\n  limitManager,\n  attributeScrubbers,\n  embraceDataURL,\n}: SetupLogsArgs) => {\n  const embraceLogManager = new EmbraceLogManager({\n    spanSessionManager,\n    limitManager,\n  });\n  log.setGlobalLogManager(embraceLogManager);\n\n  const loggerProvider = new LoggerProvider({\n    resource,\n  });\n\n  const finalLogProcessors: LogRecordProcessor[] = [\n    ...logProcessors,\n    new IdentifiableSessionLogRecordProcessor({\n      spanSessionManager,\n    }),\n    new EmbraceLogRecordProcessor(),\n    new UserLogRecordProcessor({ userManager }),\n    new LogRecordScrubProcessor({ attributeScrubbers }),\n  ];\n\n  logExporters?.forEach(exporter => {\n    finalLogProcessors.push(new BatchLogRecordProcessor(exporter));\n  });\n\n  if (sendingToEmbrace && appID && enduserPseudoID) {\n    finalLogProcessors.push(\n      new BatchLogRecordProcessor(\n        new EmbraceLogExporter({\n          appID,\n          embraceDataURL,\n          userID: enduserPseudoID,\n        })\n      )\n    );\n  }\n\n  for (const logProcessor of finalLogProcessors) {\n    loggerProvider.addLogRecordProcessor(logProcessor);\n  }\n\n  logs.setGlobalLoggerProvider(loggerProvider);\n\n  return loggerProvider;\n};\n"],"names":["initSDK","appID","appVersion","templateBundleID","resource","Resource","empty","spanExporters","logExporters","spanProcessors","propagator","defaultInstrumentationConfig","instrumentations","contextManager","logProcessors","attributeScrubbers","enableDefaultAttributeScrubbing","additionalQueryParamsToScrub","logLevel","DiagLogLevel","ERROR","embraceDataURL","embraceConfigURL","diagLogger","diag","createComponentLogger","namespace","dynamicSDKConfigManager","providedDynamicSDKConfigManager","dynamicSDKConfig","perf","OTelPerformanceManager","initSDKStart","getNowMillis","existingSDK","registry","registered","warn","setLogger","DiagConsoleLogger","length","Error","resourceWithWebSDKAttributes","merge","getWebSDKResource","pageSessionStorage","window","sessionStorage","sendingToEmbrace","isValidAppID","userManager","setupUser","enduserPseudoID","getEmbraceUserId","dynamicConfigManager","EmbraceDynamicConfigManager","defaultConfig","deviceId","refreshRemoteConfig","sdkFeaturesManager","EmbraceSDKFeaturesManager","isSDKEnabled","debug","limitManager","EmbraceLimitManager","DEFAULT_LIMITS","spanSessionManager","setupSession","finalAttributeScrubbers","getDefaultAttributeScrubbers","tracerProvider","setupTraces","loggerProvider","setupLogs","registerInstrumentations","setupDefaultInstrumentations","info","sdkControl","setDynamicConfig","config","setConfig","flush","forceFlush","register","recordStartupDuration","e","message","error","embraceUserManager","EmbraceUserManager","user","setGlobalUserManager","embraceSpanSessionManager","EmbraceSpanSessionManager","session","setGlobalSessionManager","embraceTraceManager","EmbraceTraceManager","trace","setGlobalTraceManager","finalSpanProcessors","createSessionSpanProcessor","EmbraceNetworkSpanProcessor","UserSpanProcessor","SpanScrubProcessor","forEach","exporter","push","BatchSpanProcessor","EmbraceSessionBatchedSpanProcessor","EmbraceTraceExporter","userID","WebTracerProvider","spanLimits","attributeCountLimit","maxAllowed","session_property","attributePerEventCountLimit","eventCountLimit","breadcrumb","attributeValueLengthLimit","embraceLogManager","EmbraceLogManager","log","setGlobalLogManager","LoggerProvider","finalLogProcessors","IdentifiableSessionLogRecordProcessor","EmbraceLogRecordProcessor","UserLogRecordProcessor","LogRecordScrubProcessor","BatchLogRecordProcessor","EmbraceLogExporter","logProcessor","addLogRecordProcessor","logs","setGlobalLoggerProvider"],"mappings":"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"}